name: Release

on:
  push:
    tags:
      - '*'  # triggers on any new tag push

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: Extract version from tag
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          VERSION=${{ steps.get_tag.outputs.TAG_NAME }}
          docker build -t juanwz/tasky:"$VERSION" .
          docker push juanwz/tasky:"$VERSION"

      - name: Check out Helm Chart repo
        uses: actions/checkout@v3
        with:
          repository: juanbrny/tasky-chart
          # Make sure your PAT has permission to push changes
          token: ${{ secrets.HELM_CHART_PAT }}
          path: helm-charts  # folder to clone the Helm repo into

      - name: Update Chart.yaml
        working-directory: helm-charts
        run: |
          # 1) Parse the existing 'version:' from Chart.yaml
          CURRENT_VERSION=$(grep '^version:' Chart.yaml | sed 's/version: //')
          
          # 2) Split CURRENT_VERSION into MAJOR, MINOR, PATCH
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # 3) Increment the PATCH by 1
          patch=$((patch + 1))
          
          # 4) Compose the new chart version
          NEW_CHART_VERSION="$major.$minor.$patch"

          echo "Current version: $CURRENT_VERSION"
          echo "New chart version: $NEW_CHART_VERSION"
          
          # 5) Replace 'version:' in Chart.yaml with the new chart version
          sed -i "s/^version:.*/version: $NEW_CHART_VERSION/" Chart.yaml

          # 6) If you want 'appVersion' to match the Docker tag, do:
          VERSION=${{ steps.get_tag.outputs.TAG_NAME }}
          sed -i "s/^appVersion:.*/appVersion: $VERSION/" Chart.yaml

          # OR if you want 'appVersion' to match the newly incremented chart version, do:
          # sed -i "s/^appVersion:.*/appVersion: $NEW_CHART_VERSION/" Chart.yaml

      - name: Commit and push chart changes
        working-directory: helm-charts
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add Chart.yaml
          git commit -m "Update Helm chart to version ${{ steps.get_tag.outputs.TAG_NAME }}; Chart version bumped"
          git push

      - name: Create a tag in the Helm chart repo
        working-directory: helm-charts
        run: |
          VERSION=${{ steps.get_tag.outputs.TAG_NAME }}
          git tag "v${VERSION}"
          git push origin "v${VERSION}"
